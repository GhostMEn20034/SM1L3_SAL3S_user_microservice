name: 'Deliver the code to the GKE cluster'

on:
  push:
    branches:
      - master

env:
  K8S_DIR: k8s/production

jobs:
  # First Job: Run Django Tests with Docker Compose
  test:
    name: 'Run Django Tests with Docker Compose'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Create .env file with test environment variables'
        run: |
          echo "${{ secrets.ENV_VARS_TEST }}" > .env

      - name: 'Set up Docker Compose'
        run: |
          docker compose -f docker-compose-test-env.yaml up -d

      - name: 'Check the list of services'
        run: |
          docker compose ps

      - name: 'Run Django tests in the "web" service'
        run: |
          docker compose exec web python manage.py test -v 2

      - name: 'Shut down Docker Compose services'
        run: |
          docker compose -f docker-compose-test-env.yaml down

  # Second Job: Deploy to GKE
  build-publish-deploy:
    name: 'Build, Push to Docker Hub, and Deploy to GKE'
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'  # Only deploy from the master branch
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      # Step 1: Build and push Docker image to Docker Hub
      - name: 'Log in to Docker Hub'
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 'Build Docker image'
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:latest .

      - name: 'Push Docker image to Docker Hub'
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:latest
      
      # Step 2: Authenticate with Google Cloud and Deploy to GKE
      - id: 'auth'
        name: 'Google Cloud Auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: 'Get GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ vars.GKE_CLUSTER_NAME }}
          namespace: $${{ vars.GKE_K8S_NAMESPACE }}
          location: ${{ vars.GKE_CLUSTER_ZONE }}

      - name: 'Create .env file with production environment variables'
        working-directory: ${{ env.K8S_DIR }}
        run: |
          echo "${{ secrets.ENV_VARS_PROD }}" > .env

      - name: 'Delete previous revision of the secret "web-secrets"'
        working-directory: ${{ env.K8S_DIR }}
        run: |
          kubectl delete secret web-secrets || true

      - name: 'Create Kubernetes secret "web-secrets"'
        working-directory: ${{ env.K8S_DIR }}
        run: |
          kubectl create secret generic web-secrets --from-env-file=.env

      - name: 'Apply config-maps'
        working-directory: ${{ env.K8S_DIR }}
        run: |
          kubectl apply -f config-maps/

      - name: 'Apply persistent volume to use Google Cloud Storage FUSE as a storage'
        working-directory: ${{ env.K8S_DIR }}
        run: |
          kubectl apply -f persistent-volumes/

      - name: 'Apply persistent volume claims'
        working-directory: ${{ env.K8S_DIR }}
        run: |
          kubectl apply -f persistent-volume-claims/

      - name: "Apply migrations to web APIs Database"
        working-directory: ${{ env.K8S_DIR }}
        run: |
          kubectl apply -f jobs/migrate-job.yaml
          kubectl wait --for=condition=complete --timeout=250s job/django-db-migrations

      - name: "Collect static files and write them to Google Cloud Storage FUSE"
        working-directory: ${{ env.K8S_DIR }}
        run: |
          kubectl apply -f jobs/collect-staticfiles-job.yaml
          kubectl wait --for=condition=complete --timeout=250s job/django-collect-staticfiles

      - name: 'Apply services'
        working-directory: ${{ env.K8S_DIR }}
        run: |
          kubectl apply -f services/

      - name: 'Apply deployments'
        working-directory: ${{ env.K8S_DIR }}
        run: |
          kubectl apply -f deployments/